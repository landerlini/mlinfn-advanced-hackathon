import corner
import numpy as np
import matplotlib.pyplot as plt


def plot_histograms_and_ratios(model_sample, original_sample):
    """
    Plot histograms and ratios of features from model and original samples.

    :param model_sample: Numpy array of samples generated by the model.
    :param original_sample: Numpy array of original (FullSim) samples.
    """
    # Names of the variables for the plots
    feature_names = ["pt", "Eta", "phi", "nConstituents", "bTag"]

    # Set up the figure and axes for the plot
    fig, axes = plt.subplots(nrows=2, ncols=5, figsize=(20, 6), gridspec_kw={'height_ratios': [3, 1]})
    fig.suptitle("Histograms and Ratio Plots", fontsize=16, y=1.05)

    for j, (ax, rax) in enumerate(zip(axes[0], axes[1])):
        # Adjust binning based on the feature
        bins = np.arange(-0.5, 80.5, 2) if j == 3 else 50

        # Histogram range for original sample
        _, rangeR, _ = ax.hist(original_sample[:, j], histtype="step", lw=1, bins=bins, label="FullSim")

        # Saturate model samples to histogram range
        saturated_samples = np.clip(model_sample[:, j], np.min(rangeR), np.max(rangeR))

        # Plot histogram for model samples
        ax.hist(saturated_samples, histtype="step", lw=1, range=[np.min(rangeR), np.max(rangeR)], bins=bins, label="Model")
        ax.legend(frameon=False, loc="upper right")

        # Calculate and plot the ratio of the histograms
        hist_reco, bins_reco = np.histogram(original_sample[:, j], bins=bins, range=[np.min(rangeR), np.max(rangeR)])
        hist_model, bins_model = np.histogram(saturated_samples, bins=bins, range=[np.min(rangeR), np.max(rangeR)])
        ratio = np.where(hist_reco > 0, hist_model / hist_reco, 0)
        rax.plot(bins_reco[:-1], ratio, marker="x", markersize=3.5, linestyle="", label="Model/FullSim")
        rax.axhline(y=1, color='red', linestyle='--', linewidth=0.5)
        rax.set_ylabel("Ratio")
        rax.set_ylim(0.5, 1.5)  # Set the y-axis range for clarity

        # Set titles and labels
        ax.set_title(feature_names[j])

    # Adjust the layout for better readability
    plt.subplots_adjust(top=0.9, hspace=0.4)
    plt.show()


def make_corner(reco, samples, title):
    """
    Create a corner plot comparing FullSim and model samples.

    :param reco: Numpy array of FullSim samples.
    :param samples: Numpy array of samples generated by the model.
    :param title: Title for the corner plot.
    """
    # Legend lines for the plot
    blue_line = mlines.Line2D([], [], color="tab:blue", label="FullSim")
    red_line = mlines.Line2D([], [], color="tab:orange", label="Model")

    # Define ranges and labels for the corner plot
    ranges = [(0, 300), (-2, 2), (0, 6.4), (0, 80), (-0.2, 1.2)]  # Ranges for pt, eta, phi, nConst, btag
    labels = ["pt", "eta", "phi", "NConstituents", "btag"]

    # Create the corner plot for FullSim samples
    fig = corner.corner(reco, range=ranges, labels=labels, color="tab:blue", levels=[0.5, 0.9, 0.99],
                        hist_bin_factor=3, scale_hist=True, plot_datapoints=False, hist_kwargs={"ls": "--"},
                        contour_kwargs={"linestyles": "--"}, label_kwargs={"fontsize": 16})

    # Add the model samples to the same plot
    fig = corner.corner(samples, range=ranges, fig=fig, color="tab:orange", levels=[0.5, 0.9, 0.99],
                  hist_bin_factor=3, scale_hist=True, plot_datapoints=False, label_kwargs={"fontsize": 16})

    # Set the title and return the figure
    plt.suptitle(title, fontsize=20)
    return fig